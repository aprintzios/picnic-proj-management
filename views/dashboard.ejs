<%- include('./partials/header.ejs'); %>

    <%- include('./partials/nav.ejs'); %>
        <%- include('./partials/sidenav.ejs'); %>

            <div id="mainContent">

                <div id="filterSelect">
                    <form action="#">
                        <div>
                            Filter by Project

                            <%if(userProjects){%>
                                <%for (let i=0; i<userProjects.length; i++){%>

                                    <p>
                                        <label>
                                            <input class="projectFilter" name="<%=userProjects[i]._id%>"
                                                type="checkbox" />
                                            <span>
                                                <%=userProjects[i].name%>
                                            </span>
                                        </label>
                                    </p>
                                    <%}%>
                                        <%}%>

                        </div>
                        <div>
                            Filter by Status
                            <p>
                                <label>
                                    <input class="statusFilter" name="icebox" type="checkbox" />
                                    <span>Icebox</span>
                                </label>
                            </p>
                            <p>
                                <label>
                                    <input class="statusFilter" name="current" type="checkbox" />
                                    <span>Current/MVP</span>
                                </label>
                            </p>
                            <p>
                                <label>
                                    <input class="statusFilter" name="completed" type="checkbox" />
                                    <span>Completed</span>
                                </label>
                            </p>
                        </div>
                        <!-- <div>
                            <label for="dueAfter">Due after</label>
                            <input name="dueAfter" type="text" class="datepicker">
                        </div>

                        <div>
                            <label for="dueBefore">Due before</label>
                            <input name="dueBefore" type="text" class="datepicker">
                        </div> -->
                    </form>
                </div>

                <div id="taskContainer">

                    <table class="bordered" id="dashboardTaskTable">
                        <th id="taskHeader" class="">Task <img id="taskArrow" class="sortArrow" src="/images/down.png"
                                alt=""></th>
                        <th id="projectHeader" class="">Project <img id="projArrow" class="sortArrow" src="" alt="">
                        </th>
                        <th id="dueHeader" class="">Due <img id="dueArrow" class="sortArrow" src="" alt="">
                        </th>
                        <th id="statusHeader" class="">Status <img id="statusArrow" class="sortArrow" src="" alt="">
                        </th>
                        <!-- 
                        <%if (userTasks){%>
                            <%for (let i=0; i<userTasks.length; i++){%>
                                <tr>
                                    <td>
                                        <%=userTasks[i].name%>
                                    </td>
                                    <td>
                                        <a href="/projects/<%=userTasks[i].project._id%>">
                                            <%=userTasks[i].project.name%>
                                        </a>
                                    </td>
                                    <td>
                                        <%=userTasks[i].due.toDateString()%>
                                    </td>
                                    <td>
                                        <%=userTasks[i].status%>
                                    </td>
                                    <td>
                                        <a href="/projects/<%=userTasks[i].project._id%>/task/<%=userTasks[i]._id%>">
                                            <img class="updateImg" src="/images/edit.png" alt="editTask">
                                        </a>
                                        <form method="POST"
                                            action="/projects/<%=userTasks[i].project._id%>/task/<%=userTasks[i]._id%>/destroy?_method=DELETE">
                                            <button class="updateBtn"> <img class="updateImg" src="/images/delete.png"
                                                    alt="deleteTask">
                                            </button>
                                        </form>


                                    </td>
                                </tr>
                                <%}%>
                                    <%}%> -->

                    </table>

                    <div>
                        <canvas id="myChart" width="200" height="100"></canvas>

                    </div>
                </div>

            </div>

            <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <script>

                let taskSortUp = true;
                let projSortUp = true;
                let dueSortUp = true;
                let statusSortUp = true;
                let taskList;

                document.addEventListener('DOMContentLoaded', function () {
                    var elems = document.querySelectorAll('.sidenav');
                    var instances = M.Sidenav.init(elems);
                });
                document.addEventListener('DOMContentLoaded', function () {
                    var elems = document.querySelectorAll('select');
                    var instances = M.FormSelect.init(elems);
                });
                document.addEventListener('DOMContentLoaded', function () {
                    var elems = document.querySelectorAll('.datepicker');
                    var instances = M.Datepicker.init(elems);
                });

                //get header elements
                let taskEl = document.getElementById("taskHeader");
                let projectEl = document.getElementById("projectHeader");
                let dueEl = document.getElementById("dueHeader");
                let statusEl = document.getElementById("statusHeader");

                //get arrow elements

                let taskArrow = document.getElementById("taskArrow");
                let projArrow = document.getElementById("projArrow");
                let dueArrow = document.getElementById("dueArrow");
                let statusArrow = document.getElementById("statusArrow");

                //get task container
                let taskContainer = document.getElementById("dashboardTaskTable");


                taskEl.addEventListener("click", headerClick);
                projectEl.addEventListener("click", headerClick);
                dueEl.addEventListener("click", headerClick);
                statusEl.addEventListener("click", headerClick);

                taskArrow.addEventListener("click", arrowClick);
                projArrow.addEventListener("click", arrowClick);
                dueArrow.addEventListener("click", arrowClick);
                statusArrow.addEventListener("click", arrowClick);

                function headerClick(e) {
                    //determine which header was clicked
                    if (e.target.id == "taskHeader") {
                        if (taskSortUp == true) {
                            taskSortUp = false;
                            //clear all other arrows
                            projArrow.src = "";
                            dueArrow.src = "";
                            statusArrow.src = "";
                            //sort down
                            taskArrow.src = "/images/down.png"
                            //sort taskList
                            sortList(taskList, "taskdown");
                            renderTable(taskList);
                        } else {
                            taskSortUp = true;
                            //clear all other arrows
                            projArrow.src = "";
                            dueArrow.src = "";
                            statusArrow.src = "";
                            //sort up
                            taskArrow.src = "/images/up.png"
                            sortList(taskList, "taskup");
                            renderTable(taskList);
                        }

                    } else if (e.target.id == "projectHeader") {
                        if (projSortUp == true) {
                            projSortUp = false;
                            //clear all other arrows
                            taskArrow.src = "";
                            dueArrow.src = "";
                            statusArrow.src = "";
                            //sort down
                            projArrow.src = "/images/down.png"
                            sortList(taskList, "projdown");
                            renderTable(taskList);
                        } else {
                            projSortUp = true;
                            //clear all other arrows
                            taskArrow.src = "";
                            dueArrow.src = "";
                            statusArrow.src = "";
                            //sort up
                            projArrow.src = "/images/up.png"
                            sortList(taskList, "projup");
                            renderTable(taskList);
                        }
                    } else if (e.target.id == "dueHeader") {
                        if (dueSortUp == true) {
                            dueSortUp = false;
                            //clear all other arrows
                            projArrow.src = "";
                            taskArrow.src = "";
                            statusArrow.src = "";
                            //sort down
                            dueArrow.src = "/images/down.png"
                            sortList(taskList, "datedown");
                            renderTable(taskList);
                        } else {
                            dueSortUp = true;
                            //clear all other arrows
                            projArrow.src = "";
                            taskArrow.src = "";
                            statusArrow.src = "";
                            //sort up
                            dueArrow.src = "/images/up.png"
                            sortList(taskList, "dateup");
                            renderTable(taskList);
                        }
                    } else if (e.target.id == "statusHeader") {
                        console.log("status header");
                        if (statusSortUp == true) {
                            console.log("sort down");
                            statusSortUp = false;
                            //clear all other arrows
                            projArrow.src = "";
                            dueArrow.src = "";
                            taskArrow.src = "";
                            //sort down
                            statusArrow.src = "/images/down.png"
                            sortList(taskList, "statusdown");
                            renderTable(taskList);
                        } else {
                            console.log("sort up");
                            statusSortUp = true;
                            //clear all other arrows
                            projArrow.src = "";
                            dueArrow.src = "";
                            taskArrow.src = "";
                            //sort up
                            statusArrow.src = "/images/up.png"
                            sortList(taskList, "statusup");
                            renderTable(taskList);
                        }
                    }

                }

                function arrowClick(e) {
                    //determine which header was clicked
                    if (e.target.id == "taskArrow") {
                        if (taskSortUp == true) {
                            taskSortUp = false;
                            //clear all other arrows
                            projArrow.src = "";
                            dueArrow.src = "";
                            statusArrow.src = "";
                            //sort down
                            taskArrow.src = "/images/down.png"
                            sortList(taskList, "taskdown");
                            renderTable(taskList);
                        } else {
                            taskSortUp = true;
                            //clear all other arrows
                            projArrow.src = "";
                            dueArrow.src = "";
                            statusArrow.src = "";
                            //sort up
                            taskArrow.src = "/images/up.png"
                            sortList(taskList, "taskup");
                            renderTable(taskList);
                        }

                    } else if (e.target.id == "projArrow") {
                        if (projSortUp == true) {
                            projSortUp = false;
                            //clear all other arrows
                            taskArrow.src = "";
                            dueArrow.src = "";
                            statusArrow.src = "";
                            //sort down
                            projArrow.src = "/images/down.png"
                            sortList(taskList, "projdown");
                            renderTable(taskList);
                        } else {
                            projSortUp = true;
                            //clear all other arrows
                            taskArrow.src = "";
                            dueArrow.src = "";
                            statusArrow.src = "";
                            //sort up
                            projArrow.src = "/images/up.png"
                            sortList(taskList, "projup");
                            renderTable(taskList);
                        }
                    } else if (e.target.id == "dueArrow") {
                        if (dueSortUp == true) {
                            dueSortUp = false;
                            //clear all other arrows
                            projArrow.src = "";
                            taskArrow.src = "";
                            statusArrow.src = "";
                            //sort down
                            dueArrow.src = "/images/down.png"
                            sortList(taskList, "datedown");
                            renderTable(taskList);
                        } else {
                            dueSortUp = true;
                            //clear all other arrows
                            projArrow.src = "";
                            taskArrow.src = "";
                            statusArrow.src = "";
                            //sort up
                            dueArrow.src = "/images/up.png"
                            sortList(taskList, "dateup");
                            renderTable(taskList);
                        }
                    } else if (e.target.id == "statusArrow") {
                        if (statusSortUp == true) {
                            statusSortUp = false;
                            //clear all other arrows
                            projArrow.src = "";
                            dueArrow.src = "";
                            taskArrow.src = "";
                            //sort down
                            statusArrow.src = "/images/down.png"
                            sortList(taskList, "statusdown");
                            renderTable(taskList);
                        } else {
                            statusSortUp = true;
                            //clear all other arrows
                            projArrow.src = "";
                            dueArrow.src = "";
                            taskArrow.src = "";
                            //sort up
                            statusArrow.src = "/images/up.png"
                            sortList(taskList, "statusup");
                            renderTable(taskList);
                        }
                    }

                }


                function renderTable(taskList) {

                    //clear previous
                    var taskChildren = taskContainer.querySelectorAll('.taskRow');
                    for (let i = 0; i < taskChildren.length; i++) {
                        taskChildren[i].remove();
                    }


                    for (let i = 0; i < taskList.length; i++) {
                        let newElementRow = document.createElement('tr');
                        newElementRow.classList.add("taskRow")
                        let td1 = document.createElement('td');
                        let td2 = document.createElement('td');
                        let td3 = document.createElement('td');
                        let td4 = document.createElement('td');
                        let pa = document.createElement('a');

                        td1.innerHTML = taskList[i].name;
                        pa.href = "/projects/" + taskList[i].project._id;
                        pa.innerText = taskList[i].project.name;
                        td2.appendChild(pa);
                        td3.innerHTML = taskList[i].due.slice(0, 10);
                        td4.innerHTML = taskList[i].status;

                        newElementRow.appendChild(td1);
                        newElementRow.appendChild(td2);
                        newElementRow.appendChild(td3);
                        newElementRow.appendChild(td4);
                        taskContainer.appendChild(newElementRow);
                    }

                }
                const ctx = document.getElementById('myChart').getContext('2d');
                let myChart;
                function renderGraph(icebox, current, completed) {
                    myChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: ['Icebox', 'Current', 'Completed'],
                            datasets: [{
                                label: "",
                                data: [icebox, current, completed],
                                backgroundColor: [
                                    'rgba(206, 150, 251, 0.2)',
                                    'rgba(255, 143, 207, 0.2)',
                                    'rgba(0, 194, 186, 0.2)'
                                ],
                                borderColor: [
                                    'rgba(206, 150, 251, 1)',
                                    'rgba(255, 143, 207, 1)',
                                    'rgba(0, 194, 186, 1)'
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });

                }

                var projFilters = document.querySelectorAll(".projectFilter");
                var statusFilters = document.querySelectorAll(".statusFilter");

                let projChecked = [];
                let status = [];
                for (let i = 0; i < projFilters.length; i++) {
                    projFilters[i].addEventListener('change', function () {
                        if (this.checked) {
                            projChecked.push(this.name);
                            dashFilter(projChecked, status);
                        } else {
                            let projIndex;
                            for (let j = 0; j < projChecked.length; j++) {
                                if (projChecked[j] == this.name) {
                                    projChecked.splice(j, 1);
                                }
                            }
                            dashFilter(projChecked, status);
                        }
                    });
                }

                for (let i = 0; i < statusFilters.length; i++) {
                    statusFilters[i].addEventListener('change', function () {
                        if (this.checked) {
                            //find which status was checked and push it
                            if (this.name == 'icebox') {
                                status.push('icebox');
                            } else if (this.name == 'current') {
                                status.push('current');
                            } else {
                                status.push('completed');
                            }
                            dashFilter(projChecked, status);
                        } else {
                            for (let j = 0; j < status.length; j++) {
                                if (status[j] == this.name) {
                                    status.splice(j, 1);
                                }
                            }
                            dashFilter(projChecked, status);
                        }
                    });
                }
                let icebox = 0;
                let current = 0;
                let completed = 0;
                async function dashFilter(projects, status) {
                    const endpoint = '/dashFilter';
                    taskList = await fetch(endpoint, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            projects,
                            status
                        })
                    }).then(res => res.json());

                    icebox = 0;
                    current = 0;
                    completed = 0;
                    for (let i = 0; i < taskList.length; i++) {
                        if (taskList[i].status == 'icebox') {
                            icebox++;
                        } else if (taskList[i].status == 'current') {
                            current++;
                        } else {
                            completed++;
                        }
                    }
                    if (myChart) {
                        myChart.destroy();
                    }
                    //sort here

                    renderTable(taskList);
                    renderGraph(icebox, current, completed);
                }

                dashFilter(projChecked, status);

                function sortList(list, sort) {
                    if (sort == "taskdown") {
                        for (let i = 0; i < list.length; i++) {
                            let min = list[i].name;
                            let minIndex = i;
                            for (let j = i + 1; j < list.length; j++) {
                                if (list[j].name < min) {
                                    min = list[j].name;
                                    minIndex = j;
                                }

                            }
                            //swap i and minindex
                            let temp = list[i];
                            list[i] = list[minIndex];
                            list[minIndex] = temp;
                        }
                    } else if (sort == "taskup") {
                        for (let i = 0; i < list.length; i++) {
                            let min = list[i].name;
                            let minIndex = i;
                            for (let j = i + 1; j < list.length; j++) {
                                if (list[j].name < min) {
                                    min = list[j].name;
                                    minIndex = j;
                                }

                            }
                            //swap i and minindex
                            let temp = list[i];
                            list[i] = list[minIndex];
                            list[minIndex] = temp;
                        }
                        list.reverse();
                    } else if (sort == "projdown") {
                        for (let i = 0; i < list.length; i++) {
                            let min = list[i].project.name;
                            let minIndex = i;
                            for (let j = i + 1; j < list.length; j++) {
                                if (list[j].project.name < min) {
                                    min = list[j].project.name;
                                    minIndex = j;
                                }
                            }
                            //swap i and minindex
                            let temp = list[i];
                            list[i] = list[minIndex];
                            list[minIndex] = temp;
                        }
                        list.reverse();
                    } else if (sort == "projup") {
                        for (let i = 0; i < list.length; i++) {
                            let min = list[i].project.name;
                            let minIndex = i;
                            for (let j = i + 1; j < list.length; j++) {
                                if (list[j].project.name < min) {
                                    min = list[j].project.name;
                                    minIndex = j;
                                }

                            }
                            //swap i and minindex
                            let temp = list[i];
                            list[i] = list[minIndex];
                            list[minIndex] = temp;
                        }
                    } else if (sort == "datedown") {
                        for (let i = 0; i < list.length; i++) {
                            let min = list[i].due;
                            let minIndex = i;
                            for (let j = i + 1; j < list.length; j++) {
                                if (list[j].due < min) {
                                    min = list[j].due;
                                    minIndex = j;
                                }
                            }
                            //swap i and minindex
                            let temp = list[i];
                            list[i] = list[minIndex];
                            list[minIndex] = temp;
                        }

                        console.log("proj down sort", list);
                    } else if (sort == "dateup") {
                        console.log("function due up");
                        for (let i = 0; i < list.length; i++) {
                            let min = list[i].due;
                            let minIndex = i;
                            for (let j = i + 1; j < list.length; j++) {
                                if (list[j].due < min) {
                                    min = list[j].due;
                                    minIndex = j;
                                }

                            }
                            //swap i and minindex
                            let temp = list[i];
                            list[i] = list[minIndex];
                            list[minIndex] = temp;
                        }
                        list.reverse();
                    } else if (sort == "statusdown") {
                        for (let i = 0; i < list.length; i++) {
                            let min = list[i].status;
                            let minIndex = i;
                            for (let j = i + 1; j < list.length; j++) {
                                if (list[j].status < min) {
                                    min = list[j].status;
                                    minIndex = j;
                                }
                            }
                            //swap i and minindex
                            let temp = list[i];
                            list[i] = list[minIndex];
                            list[minIndex] = temp;
                        }
                    } else if (sort == "statusup") {
                        for (let i = 0; i < list.length; i++) {
                            let min = list[i].status;
                            let minIndex = i;
                            for (let j = i + 1; j < list.length; j++) {
                                if (list[j].status < min) {
                                    min = list[j].status;
                                    minIndex = j;
                                }

                            }
                            //swap i and minindex
                            let temp = list[i];
                            list[i] = list[minIndex];
                            list[minIndex] = temp;
                        }
                        list.reverse();
                    }
                }
            </script>

            <!-- </body>

</html> -->

            <%- include('./partials/footer.ejs'); %>